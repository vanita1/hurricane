read_ext_tracks<-function(file="ebtrk_atlc_1988_2015.txt",...,ext_track_widths=NULL,
                          ext_track_colnames=NULL,degW=TRUE){
    if (is.null(ext_track_widths)){
                ext_track_widths <- c(7, 10, 2, 2, 3, 5, 5, 6, 4, 5, 4, 4, 5, 3, 4, 3, 3, 3,
                           4, 3, 3, 3, 4, 3, 3, 3, 2, 6, 1)
               
    }
  
    if (is.null(ext_track_colnames)){
                ext_track_colnames <- c("storm_id", "storm_name", "month", "day",
                              "hour", "year", "latitude", "longitude",
                           "max_wind", "min_pressure", "rad_max_wind",
                           "eye_diameter", "pressure_1", "rad_1",
                paste("radius_34", c("ne", "se", "sw", "nw"), sep = "_"),
                paste("radius_50", c("ne", "se", "sw", "nw"), sep = "_"),
                paste("radius_64", c("ne", "se", "sw", "nw"), sep = "_"),
                             "storm_type", "distance_to_land", "final"
                            )
    }
                          


ext_tracks <- suppressMessages(read_fwf(file,readr::fwf_widths(ext_track_widths, ext_track_colnames),
na = "-99"))
    
#format the longitude to ensure it has negative values in the Western hemisphere
    if (degW) {ext_tracks$longitude<- -ext_tracks$longitude }
    
    return(ext_tracks)
}

 h = read_ext_tracks("ebtrk_atlc_1988_2015.txt")


keepcols=c("storm_name","date","longitude","latitude")
 keepcols<-c(keepcols,c("quadrant","wind_speed","wind_radius","storm_id_unique"))

ext_tracks =mutate(ext_tracks,date = lubridate::ymd_h(paste(year,month,day,hour,sep="")),storm_id_unique = paste0(storm_name,"-",year))
gather_cols<-names(ext_tracks)[dplyr::contains(match="radius_",vars=names(ext_tracks))]

tidy_tracks<-tidyr::gather_(ext_tracks,key_col="speed_quadrant",
                              value_col="wind_radius",gather_cols=gather_cols,
                              na.rm=FALSE,factor_key=FALSE)

tidy_tracks<-tidyr::separate_(tidy_tracks,col="speed_quadrant",
                          into=c("rad_1","wind_speed","quadrant"),
                              sep="_",remove=TRUE,convert=TRUE)

 tidy_tracks$rad_1<-NULL

tidy_tracks<-dplyr::select_(tidy_tracks,.dots=stats::setNames(keepcols,keepcols))
  tidy_tracks = spread(tidy_tracks,quadrant,wind_radius)




tidy_tracks1 <- subset(tidy_tracks,storm_id_unique == "KATRINA-2005" & latitude == 29.5)


Once u get it

tidy_tracks1<- tidy_tracks1 %>% mutate(ne = ne*1852*1,se = se*1852*1,
                                sw = sw*1852*1,
                                   nw = nw*1852*1 )

l_points_1 = new_points4[0,]

speeds = unique(tidy_tracks1$wind_speed)

x_tracks = tidy_tracks1



for (j in 1:length(speeds)){

for (i in 1:nrow(x_tracks)) {

ne_tracks <- base::data.frame(geosphere::destPoint(p = c(x_tracks[i,]$longitude,x_tracks[i,]$latitude),b = 1:90,d = x_tracks[j,]$ne))
ne_tracks$wind_speed<-speeds[j]
ne_tracks$ne = x_tracks[i,]$ne
ne_tracks$se = x_tracks[i,]$se
ne_tracks$sw = x_tracks[i,]$sw
ne_tracks$nw = x_tracks[i,]$nw
nw_tracks<- base::data.frame(geosphere::destPoint(p = c(x_tracks[i,]$longitude,x_tracks[i,]$latitude),b = 271:360,d = x_tracks[j,]$nw)) 
nw_tracks$wind_speed<-speeds[j]
nw_tracks$ne = x_tracks[i,]$ne
nw_tracks$se = x_tracks[i,]$se
nw_tracks$sw = x_tracks[i,]$sw
nw_tracks$nw = x_tracks[i,]$nw                
se_tracks <- base::data.frame(geosphere::destPoint(p = c(x_tracks[i,]$longitude,x_tracks[i,]$latitude),b = 91:180,d = x_tracks[j,]$se))
se_tracks$wind_speed<-speeds[j]
se_tracks$ne = x_tracks[i,]$ne
se_tracks$se = x_tracks[i,]$se
se_tracks$sw = x_tracks[i,]$sw
se_tracks$nw = x_tracks[i,]$nw
sw_tracks <- base::data.frame(geosphere::destPoint(p = c(x_tracks[i,]$longitude,x_tracks[i,]$latitude),b = 181:270,d = x_tracks[j,]$sw))
sw_tracks$wind_speed<-speeds[j]
sw_tracks$ne = x_tracks[i,]$ne
sw_tracks$se = x_tracks[i,]$se
sw_tracks$sw = x_tracks[i,]$sw
sw_tracks$nw = x_tracks[i,]$nw

l_points <- dplyr::bind_rows(list(ne_tracks,se_tracks,sw_tracks,nw_tracks))}


l_points_1 = dplyr::bind_rows(list(l_points,l_points_1))}




ggplot(data = l_points_1, aes(x=lon, y=lat, ne = ne, nw = nw, se = se, sw = sw,wind_speed = wind_speed,color = wind_speed,fill = wind_speed)) + geom_hurricane()+
scale_color_manual(name = "Wind speed (kts)", 
                   values = c("red", "orange", "yellow")) + 
    scale_fill_manual(name = "Wind speed (kts)", 
                      values = c("red", "orange", "yellow"))




base_map +
geom_hurricane(data = l_points_1,
               aes(x = lon, y = lat, 
                   ne = ne, se = se, nw = nw,sw = sw,
                   fill = wind_speed, color = wind_speed)) +
 scale_color_manual(name = "Wind speed (kts)", 
                     values = c("red", "orange", "yellow")) + 
  scale_fill_manual(name = "Wind speed (kts)", 
                    values = c("red", "orange", "yellow"))+


geom_hurricane(data = l_points_2,
               aes(x = lon, y = lat, 
                   ne = ne, se = se, nw = nw,sw = sw,
                   fill = wind_speed, color = wind_speed)) +
 scale_color_manual(name = "Wind speed (kts)", 
                     values = c("red", "orange", "yellow")) + 
  scale_fill_manual(name = "Wind speed (kts)", 
                    values = c("red", "orange", "yellow"))





base_map = get_map("Louisiana", zoom = 6, maptype = "toner-background") %>%
  ggmap(extent = "device")



geom_hurricane<-function(mapping = NULL, 
                          data = NULL, 
                          stat = "identity",
                          position = "identity",
                          na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,...){
    
    
    list(
        layer(geom = GeomHurricane,mapping = mapping,data = data,stat = stat, 
              position = position, show.legend = show.legend, inherit.aes = inherit.aes,
              params = list(na.rm = na.rm,
                            ...))

    
    
    
}



GeomHurricane<-ggplot2::ggproto("GeomHurricane",Geom,
                                
                                required_aes = c("x","y","ne","se","nw","sw"
                                ),
                                
                                default_aes = aes(fill="red",
                                                  colour="red",
                                                  alpha=1,
                                                  scale_radii=1
                                ),
                                
                                draw_key = draw_key_polygon,
                                draw_group = function(data,panel_scales,coord){
                                    coords <- coord$transform(data, panel_scales)
                                    str(coords)
                                    
                                    
                                    
                                    head(coords)
                                    
                                    grid::polygonGrob(
                                        x=coords$x, y=coords$y,
                                        gp = grid::gpar(
                                            fill = coords$fill,colour = coords$colour,alpha = coords$alpha
                                        )
                                    )
                                }
)


25.9
31.1

geom_hurricane<-function (mapping = NULL, 
                          data = NULL, 
                          stat = "identity",
                          position = "identity",
                          na.rm = FALSE, show.legend = NA, inherit.aes = TRUE,...){
    
    
    list(
        layer(geom = GeomHurricane,mapping = mapping,data = data,stat = stat, 
              position = position, show.legend = show.legend, inherit.aes = inherit.aes,
              params = list(na.rm = na.rm,
                            ...)),
        layer(geom = GeomHurricane,mapping = mapping,data = data,stat = stat, 
              position = position, show.legend = show.legend, inherit.aes = inherit.aes,
              params = list(na.rm = na.rm,
                            ...))
    )
}


